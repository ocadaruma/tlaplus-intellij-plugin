IGNORED ('Taken from https://lamport.azurewebsites.net/video/ABSpec.tla\n')
MODULE_BEGIN ('------------------------------ MODULE')
WHITE_SPACE (' ')
identifier ('ABSpec')
WHITE_SPACE (' ')
---- ('--------------------------------')
WHITE_SPACE ('\n')
EXTENDS ('EXTENDS')
WHITE_SPACE (' ')
identifier ('Integers')
WHITE_SPACE ('\n\n')
CONSTANT ('CONSTANT')
WHITE_SPACE (' ')
identifier ('Data')
WHITE_SPACE ('  ')
COMMENT_LINE ('\* The set of all possible data values.')
WHITE_SPACE ('\n\n')
VARIABLES ('VARIABLES')
WHITE_SPACE (' ')
identifier ('AVar')
, (',')
WHITE_SPACE ('   ')
COMMENT_LINE ('\* The last <<value, bit>> pair A decided to send.')
WHITE_SPACE ('\n          ')
identifier ('BVar')
WHITE_SPACE ('    ')
COMMENT_LINE ('\* The last <<value, bit>> pair B received.')
WHITE_SPACE ('\n\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* Type correctness means that AVar and BVar are tuples <<d, i>> where     *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* d \in Data and i \in {0, 1}.                                            *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
identifier ('TypeOK')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE (' ')
\in ('\in')
WHITE_SPACE (' ')
identifier ('Data')
WHITE_SPACE (' ')
\X ('\X')
WHITE_SPACE (' ')
{ ('{')
number ('0')
, (',')
number ('1')
} ('}')
WHITE_SPACE ('\n          ')
JUNCTION_CONT ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('BVar')
WHITE_SPACE (' ')
\in ('\in')
WHITE_SPACE (' ')
identifier ('Data')
WHITE_SPACE (' ')
\X ('\X')
WHITE_SPACE (' ')
{ ('{')
number ('0')
, (',')
number ('1')
} ('}')
WHITE_SPACE ('\n\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* It's useful to define vars to be the tuple of all variables, for        *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* example so we can write [Next]_vars instead of [Next]_<< ...  >>        *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
JUNCTION_BREAK ('')
identifier ('vars')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
<< ('<<')
WHITE_SPACE (' ')
identifier ('AVar')
, (',')
WHITE_SPACE (' ')
identifier ('BVar')
WHITE_SPACE (' ')
>> ('>>')
WHITE_SPACE ('\n\n\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* Initially AVar can equal <<d, 1>> for any Data value d, and BVar equals *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* AVar.                                                                   *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
identifier ('Init')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE (' ')
\in ('\in')
WHITE_SPACE (' ')
identifier ('Data')
WHITE_SPACE (' ')
\X ('\X')
WHITE_SPACE (' ')
{ ('{')
number ('1')
} ('}')
WHITE_SPACE ('\n        ')
JUNCTION_CONT ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('BVar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE ('\n\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* When AVar = BVar, the sender can "send" an arbitrary data d item by     *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* setting AVar[1] to d and complementing AVar[2].  It then waits until    *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* the receiver "receives" the message by setting BVar to AVar before it   *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* can send its next message.  Sending is described by action A and        *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* receiving by action B.                                                  *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
JUNCTION_BREAK ('')
identifier ('A')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('BVar')
WHITE_SPACE ('\n     ')
JUNCTION_CONT ('')
/\ ('/\')
WHITE_SPACE (' ')
\E ('\E')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
\in ('\in')
WHITE_SPACE (' ')
identifier ('Data')
: (':')
WHITE_SPACE (' ')
identifier ('AVar')
' (''')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<< ('<<')
identifier ('d')
, (',')
WHITE_SPACE (' ')
number ('1')
WHITE_SPACE (' ')
- ('-')
WHITE_SPACE (' ')
identifier ('AVar')
[ ('[')
number ('2')
] (']')
>> ('>>')
WHITE_SPACE ('\n     ')
JUNCTION_CONT ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('BVar')
' (''')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('BVar')
WHITE_SPACE ('\n\n')
JUNCTION_BREAK ('')
identifier ('B')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE (' ')
/= ('#')
WHITE_SPACE (' ')
identifier ('BVar')
WHITE_SPACE ('\n     ')
JUNCTION_CONT ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('BVar')
' (''')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE ('\n     ')
JUNCTION_CONT ('')
/\ ('/\')
WHITE_SPACE (' ')
identifier ('AVar')
' (''')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('AVar')
WHITE_SPACE ('\n\n')
JUNCTION_BREAK ('')
identifier ('Next')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('A')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
\/ ('\/')
WHITE_SPACE (' ')
identifier ('B')
WHITE_SPACE ('\n\n')
JUNCTION_BREAK ('')
identifier ('Spec')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('Init')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
/\ ('/\')
WHITE_SPACE (' ')
[] ('[]')
[ ('[')
identifier ('Next')
]_ (']_')
identifier ('vars')
WHITE_SPACE ('\n\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* For understanding the spec, it's useful to define formulas that should  *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* be invariants and check that they are invariant.  The following         *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* invariant Inv asserts that, if AVar and BVar have equal second          *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* components, then they are equal (which by the invariance of TypeOK      *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* implies that they have equal first components).                         *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
JUNCTION_BREAK ('')
identifier ('Inv')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
( ('(')
identifier ('AVar')
[ ('[')
number ('2')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('BVar')
[ ('[')
number ('2')
] (']')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
( ('(')
identifier ('AVar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('BVar')
) (')')
WHITE_SPACE ('\n')
---- ('-----------------------------------------------------------------------------')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* FairSpec is Spec with the addition requirement that it keeps taking     *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(* steps.                                                                  *)')
WHITE_SPACE ('\n')
COMMENT_BLOCK ('(***************************************************************************)')
WHITE_SPACE ('\n')
identifier ('FairSpec')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('Spec')
WHITE_SPACE (' ')
JUNCTION_BEGIN ('')
/\ ('/\')
WHITE_SPACE (' ')
WF_ ('WF_')
identifier ('vars')
( ('(')
identifier ('Next')
) (')')
WHITE_SPACE ('\n')
JUNCTION_BREAK ('')
==== ('=============================================================================')
IGNORED ('\n\* Modification History\n\* Last modified Wed Oct 18 04:07:37 PDT 2017 by lamport\n\* Created Fri Sep 04 07:08:22 PDT 2015 by lamport')
