{
    parserClass='com.mayreh.intellij.plugin.tlaplus.parser.TLAplusParser'
    parserUtilClass='com.mayreh.intellij.plugin.tlaplus.parser.TLAplusParserUtil'

    implements='com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusElement'
    extends='com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusElementImpl'

    elementTypeHolderClass='com.mayreh.intellij.plugin.tlaplus.psi.TLAplusElementTypes'

    elementTypeClass='com.mayreh.intellij.plugin.tlaplus.psi.TLAplusElementType'
    tokenTypeClass='com.mayreh.intellij.plugin.tlaplus.psi.TLAplusTokenType'

    psiClassPrefix='TLAplus'
    psiImplClassSuffix='Impl'
    psiPackage='com.mayreh.intellij.plugin.tlaplus.psi'
    psiImplPackage='com.mayreh.intellij.plugin.tlaplus.psi.impl'

    tokens = [
        // tokens to parse disjunction
        JUNCTION_BEGIN            = 'JUNCTION_BEGIN'
        JUNCTION_CONT             = 'JUNCTION_CONT'
        JUNCTION_BREAK            = 'JUNCTION_BREAK'

        COMMENT            = 'COMMENT'
        // PlusCal comment block
        COMMENT_PLUS_CAL   = 'COMMENT_PLUS_CAL'

        MODULE_BEGIN       = 'MODULE_BEGIN'

        KEYWORD_ASSUME     = 'ASSUME'
        KEYWORD_ELSE       = 'ELSE'
        KEYWORD_LOCAL      = 'LOCAL'
        KEYWORD_ASSUMPTION = 'ASSUMPTION'
        KEYWORD_MODULE     = 'MODULE'
        KEYWORD_VARIABLE   = 'VARIABLE'
        KEYWORD_AXIOM      = 'AXIOM'
        KEYWORD_EXCEPT     = 'EXCEPT'
        KEYWORD_OTHER      = 'OTHER'
        KEYWORD_VARIABLES  = 'VARIABLES'
        KEYWORD_CASE       = 'CASE'
        KEYWORD_EXTENDS    = 'EXTENDS'
        KEYWORD_SF_        = 'SF_'
        KEYWORD_WF_        = 'WF_'
        KEYWORD_CHOOSE     = 'CHOOSE'
        KEYWORD_IF         = 'IF'
        KEYWORD_WITH       = 'WITH'
        KEYWORD_CONSTANT   = 'CONSTANT'
        KEYWORD_IN         = 'IN'
        KEYWORD_THEN       = 'THEN'
        KEYWORD_CONSTANTS  = 'CONSTANTS'
        KEYWORD_INSTANCE   = 'INSTANCE'
        KEYWORD_THEOREM    = 'THEOREM'
        KEYWORD_LET        = 'LET'
        KEYWORD_LAMBDA     = 'LAMBDA'

        LITERAL_NUMBER     = 'number'
        LITERAL_STRING     = 'string'

        IDENTIFIER         = 'identifier'

        LTUPLE             = '<<'
        RTUPLE             = '>>'
        RTUPLEUNDER        = '>>_'
        COMMA              = ','
        SEPARATOR          = '----'
        MODULE_END         = '===='
        LPAREN             = '('
        RPAREN             = ')'
        LBRACKET           = '{'
        RBRACKET           = '}'
        LSQBRACKET         = '['
        RSQBRACKET         = ']'
        RSQBRACKETUNDER    = ']_'
        DOT                = '.'
        COLON              = ':'
        SEMICOLON          = ';'
        UNDER              = '_'
        BANG               = '!'
        AT                 = '@'

        DEFINE             = '=='

        OP_ENABLED         = 'ENABLED'
        OP_UNCHANGED       = 'UNCHANGED'
        OP_POWERSET        = 'SUBSET'
        OP_DOMAIN          = 'DOMAIN'
        OP_UNION           = 'UNION'
        OP_NEG             = '~'
        OP_SQUARE          = '[]'
        OP_DIAMOND         = '<>'
        OP_DASH            = '-'
        OP_LAND            = '\land'
        OP_LAND2           = '/\'
        OP_IN              = '\in'
        OP_LT              = '<'
        OP_LTEQ            = '=<'
        OP_LTLT            = '\ll'
        OP_PREC            = '\prec'
        OP_PRECEQ          = '\preceq'
        OP_SUBSETEQ        = '\subseteq'
        OP_SUBSET          = '\subset'
        OP_SQSUBSET        = '\sqsubset'
        OP_SQSUBSETEQ      = '\sqsubseteq'
        OP_VBARDASH        = '|-'
        OP_VBAREQ          = '|='
        OP_DASHGT          = '->'
        OP_CAP             = '\cap'
        OP_SQCAP           = '\sqcap'
        OP_OPLUS           = '(+)'
        OP_OMINUS          = '(-)'
        OP_ODOT            = '(.)'
        OP_OTIMES          = '(\X)'
        OP_OSLASH          = '(/)'
        OP_LOR             = '\lor'
        OP_LOR2            = '\/'
        OP_EQUIV           = '<=>'
        OP_NOTIN           = '\notin'
        OP_GT              = '>'
        OP_GTEQ            = '>='
        OP_GTGT            = '\gg'
        OP_SUCC            = '\succ'
        OP_SUCCEQ          = '\succeq'
        OP_SUPSETEQ        = '\supseteq'
        OP_SUPSET          = '\supset'
        OP_SQSUPSET        = '\sqsupset'
        OP_SQSUPSETEQ      = '\sqsupseteq'
        OP_DASHVBAR        = '-|'
        OP_EQVBAR          = '=|'
        OP_LTDASH          = '<-'
        OP_CUP             = '\cup'
        OP_SQCUP           = '\sqcup'
        OP_UPLUS           = '\uplus'
        OP_X               = '\X'
        OP_WR              = '\wr'
        OP_PROPTO          = '\propto'
        OP_EQGT            = '=>'
        OP_EQ              = '='
        OP_NOTEQ           = '/='
        OP_TILDEGT         = '~>'
        OP_DASHPLUSDASHGT  = '-+->'
        OP_VBARDASHGT      = '|->'
        OP_DIV             = '\div'
        OP_CDOT            = '\cdot'
        OP_CIRC            = '\circ'
        OP_BULLET          = '\bullet'
        OP_STAR            = '\star'
        OP_BIGCIRC         = '\bigcirc'
        OP_SIM             = '\sim'
        OP_SIMEQ           = '\simeq'
        OP_ASYMP           = '\asymp'
        OP_APPROX          = '\approx'
        OP_CONG            = '\cong'
        OP_DOTEQ           = '\doteq'
        OP_BANGBANG        = '!!'
        OP_SHARPSHARP      = '##'
        OP_DOLLAR          = '$'
        OP_DOLLARDOLLAR    = '$$'
        OP_PERCENT         = '%'
        OP_PERCENTPERCENT  = '%%'
        OP_AMP             = '&'
        OP_AMPAMP          = '&&'
        OP_ASTER           = '*'
        OP_ASTERASTER      = '**'
        OP_PLUS            = '+'
        OP_PLUSPLUS        = '++'
        OP_DASHDASH        = '--'
        OP_DOTDOT          = '..'
        OP_DOTDOTDOT       = '...'
        OP_SLASH           = '/'
        OP_SLASHSLASH      = '//'
        OP_COLONCOLONEQ    = '::='
        OP_COLONEQ         = ':='
        OP_COLONGT         = ':>'
        OP_LTCOLON         = '<:'
        OP_QUERY           = '?'
        OP_QUERYQUERY      = '??'
        OP_SUBTRACT        = '\'
        OP_CARET           = '^'
        OP_CARETCARET      = '^^'
        OP_VBAR            = '|'
        OP_VBARVBAR        = '||'
        OP_ATAT            = '@@'
        OP_PRIME           = "'"
        OP_CARETPLUS       = '^+'
        OP_CARETASTER      = '^*'
        OP_CARETSHARP      = '^#'
        OP_DASHDOT         = '-.' // only used when define '-' prefix operator

        QUANTIFIER_E       = '\E'
        QUANTIFIER_EE      = '\EE'
        QUANTIFIER_A       = '\A'
        QUANTIFIER_AA      = '\AA'

        // TLC
        TLC_ERROR_TRACE_PRIMITIVE = 'tlc_error_trace_primitive'

        // PlusCal
        PLUS_CAL_KW_ALGORITHM = 'algorithm'
        PLUS_CAL_KW_ASSERT    = 'assert'
        PLUS_CAL_KW_AWAIT     = 'await'
        PLUS_CAL_KW_BEGIN     = 'begin'
        PLUS_CAL_KW_CALL      = 'call'
        PLUS_CAL_KW_DEFINE    = 'define'
        PLUS_CAL_KW_DO        = 'do'
        PLUS_CAL_KW_EITHER    = 'either'
        PLUS_CAL_KW_ELSE      = 'else'
        PLUS_CAL_KW_ELSIF     = 'elsif'
        PLUS_CAL_KW_END       = 'end'
        PLUS_CAL_KW_GOTO      = 'goto'
        PLUS_CAL_KW_IF        = 'if'
        PLUS_CAL_KW_MACRO     = 'macro'
        PLUS_CAL_KW_OR        = 'or'
        PLUS_CAL_KW_PRINT     = 'print'
        PLUS_CAL_KW_PROCEDURE = 'procedure'
        PLUS_CAL_KW_PROCESS   = 'process'
        PLUS_CAL_KW_RETURN    = 'return'
        PLUS_CAL_KW_SKIP      = 'skip'
        PLUS_CAL_KW_THEN      = 'then'
        PLUS_CAL_KW_VARIABLE  = 'variable'
        PLUS_CAL_KW_VARIABLES = 'variables'
        PLUS_CAL_KW_WHEN      = 'when'
        PLUS_CAL_KW_WHILE     = 'while'
        PLUS_CAL_KW_WITH      = 'with'
        PLUS_CAL_KW_FAIR      = 'fair'

        PLUS_CAL_ALGORITHM_BEGIN = 'ALGORITHM_BEGIN'
    ]

    extends('.*_expr') = expr
    consumeTokenMethod('.*_expr') = "consumeTokenFast"
    generateTokenAccessors=true

    extraRoot("tlc_error_trace") = true
    extraRoot("plus_cal_algorithm") = true
    extraRoot("code_fragment") = true
}

root ::= module

code_fragment ::= expr?
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusCodeFragmentImplMixin'
}

module ::= module_header ('EXTENDS' <<comma_list module_ref>>)? unit_with_recover* clear_indent '===='
{
  pin = 1
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusModuleContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusModuleImplMixin'
}

module_ref ::= 'identifier'
{
  implements = [
    "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusReferenceElement"
    "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierReferenceElement"]
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusModuleRefImplMixin'
}

private meta comma_list ::= <<param>>(clear_indent ',' <<param>>)*

private clear_indent ::= junc_break*

module_header ::= clear_indent 'MODULE_BEGIN' 'identifier' '----'
{
  pin = 2
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierNamedElementImplMixin'
}

private unit ::= variable_decl
               | constant_decl
               | clear_indent 'LOCAL' op_definition
               | op_definition
               | clear_indent 'LOCAL' func_definition
               | func_definition
               | clear_indent 'LOCAL' instance
               | instance
               | clear_indent 'LOCAL' module_definition
               | module_definition
               | assumption
               | theorem
               | module
               | clear_indent '----'

private unit_with_recover ::= !('====' | <<eof>>) unit
{
  pin = 1
  recoverWhile = unit_recover
}
private unit_recover ::= !(
    'VARIABLE'
  | 'VARIABLES'
  | 'CONSTANT'
  | 'CONSTANTS'
  | 'LOCAL'
  | 'identifier'
  | 'INSTANCE'
  | 'ASSUME'
  | 'ASSUMPTION'
  | 'AXIOM'
  | 'THEOREM'
  | '===='
  | '----'
  | clear_indent
)

private identifier_or_tuple ::= clear_indent (bound_name | '<<' <<comma_list bound_name>> '>>')

bound_name ::= 'identifier'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierNamedElementImplMixin'
}

prefix_op ::= clear_indent (
              '-'
            | '~'
            | '[]'
            | '<>'
            | 'DOMAIN'
            | 'ENABLED'
            | 'SUBSET'
            | 'UNCHANGED'
            | 'UNION')

infix_op ::= clear_indent (
            '!'
           | '/='
           | '##'
           | '$'
           | '$$'
           | '%'
           | '%%'
           | '&'
           | '&&'
           | '(+)'
           | '(-)'
           | '(.)'
           | '(/)'
           | '(\X)'
           | '*'
           | '**'
           | '+'
           | '++'
           | '-'
           | '-+->'
           | '--'
           | '-|'
           | '..'
           | '...'
           | '/'
           | '//'
           | '\land'
           | '::='
           | ':='
           | ':>'
           | '<'
           | '<:'
           | '<=>'
           | '\notin'
           | '='
           | '=<'
           | '=>'
           | '=|'
           | '>'
           | '>='
           | '?'
           | '??'
           | '@@'
           | '\'
           | '\lor'
           | '^'
           | '^^'
           | '|'
           | '|-'
           | '|='
           | '||'
           | '~>'
           | '\approx'
           | '\sqsupseteq'
           | '\asymp'
           | '\gg'
           | '\star'
           | '\bigcirc'
           | '\in'
           | '\prec'
           | '\subset'
           | '\bullet'
           | '\cap'
           | '\preceq'
           | '\subseteq'
           | '\propto'
           | '\succ'
           | '\cdot'
           | '\sim'
           | '\succeq'
           | '\circ'
           | '\ll'
           | '\simeq'
           | '\supset'
           | '\cong'
           | '\sqcap'
           | '\supseteq'
           | '\cup'
           | '\sqcup'
           | '\div'
           | '\sqsubset'
           | OP_UPLUS  // we can't use token value here since it causes illegal unicode escape in generated source
           | '\doteq'
           | '\sqsubseteq'
           | '\wr'
           | '\sqsupset')

infix_op_all ::= infix_op | <<parseInfixOpLand>> | <<parseInfixOpLor>>

postfix_op ::= clear_indent (
               '^+'
             | '^*'
             | '^#'
             | "'")

private op_suite ::= expr | prefix_op | infix_op | postfix_op | lambda_expr

op_args ::= clear_indent '(' <<comma_list op_suite>> clear_indent ')'

private no_op_extension ::= clear_indent unqualified_ident op_args? ('!' no_op_extension)?

private reduced_expr ::= no_op_extension
                       | paren_expr
                       | set_expr
                       | functions_expr
                       | function_literal_expr
                       | records_expr
                       | except_expr
                       | action_expr
                       | tuple_expr

anon_infix_op ::= clear_indent '_' infix_op_all clear_indent '_'
anon_prefix_op ::= prefix_op clear_indent '_'
anon_postfix_op ::= clear_indent '_' postfix_op

op_decl ::= anon_infix_op
          | anon_prefix_op
          | anon_postfix_op
          | clear_indent op_name clear_indent '(' <<comma_list (clear_indent '_')>> clear_indent ')'
          | clear_indent op_name

op_name ::= 'identifier'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierNamedElementImplMixin'
}

variable_decl ::= clear_indent ('VARIABLE' | 'VARIABLES') <<comma_list variable_name>> { pin = 2 }
variable_name ::= 'identifier'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierNamedElementImplMixin'
}

constant_decl ::= clear_indent ('CONSTANT' | 'CONSTANTS') <<comma_list op_decl>> { pin = 2 }

nonfix_lhs ::= clear_indent nonfix_lhs_name (clear_indent '(' <<comma_list op_decl>> clear_indent ')')?
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNamedLhs'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNonfixLhsImplMixin'
}
nonfix_lhs_name ::= 'identifier'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierNamedElementImplMixin'
}

prefix_op_lhs ::= clear_indent prefix_op_name clear_indent op_name
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNamedLhs'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusPrefixOpLhsImplMixin'
}
prefix_op_name ::= prefix_op
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusPrefixOpNameImplMixin'
}

dashdot_op_lhs ::= clear_indent dashdot_op_name clear_indent op_name
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNamedLhs'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusDashdotOpLhsImplMixin'
}
dashdot_op_name ::= '-.'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusDashdotOpNameImplMixin'
}

infix_op_lhs ::= clear_indent op_name infix_op_name clear_indent op_name
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNamedLhs'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusInfixOpLhsImplMixin'
}
infix_op_name ::= infix_op_all
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusInfixOpNameImplMixin'
}

postfix_op_lhs ::= clear_indent op_name postfix_op_name
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNamedLhs'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusPostfixOpLhsImplMixin'
}
postfix_op_name ::= postfix_op
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusPostfixOpNameImplMixin'
}

op_definition ::= (infix_op_lhs
                 | dashdot_op_lhs
                 | prefix_op_lhs
                 | postfix_op_lhs
                 | nonfix_lhs) clear_indent '==' expr
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusOpDefinitionImplMixin'
}

func_definition ::= clear_indent func_name
    clear_indent '[' <<comma_list quantifier_bound>> clear_indent ']' clear_indent '==' expr
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusFuncDefinitionImplMixin'
}

func_name ::= 'identifier'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierNamedElementImplMixin'
}

private quantifier_bound ::= (clear_indent '<<' <<comma_list (clear_indent bound_name)>>
    clear_indent '>>' | <<comma_list (clear_indent bound_name)>>) clear_indent '\in' expr

instance ::= clear_indent 'INSTANCE' clear_indent module_ref (clear_indent 'WITH' <<comma_list substitution>>)?
{
  pin = 2
}

private substitution ::= (clear_indent substituting_ident
                        | prefix_op
                        | infix_op_all
                        | postfix_op) clear_indent '<-' op_suite { pin = 1 }

substituting_ident ::= 'identifier'
{
  implements = [
    "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusReferenceElement"
    "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierReferenceElement"]
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusSubstitutingIdentImplMixin'
}

instance_prefix ::= (clear_indent module_ref (
    clear_indent '(' <<comma_list expr>> clear_indent ')')? clear_indent '!')+

general_identifier ::= instance_prefix? clear_indent unqualified_ident
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusGeneralReference"
}

unqualified_ident ::= 'identifier'
{
  implements = [
    "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusReferenceElement"
    "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusIdentifierReferenceElement"]
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusUnqualifiedIdentImplMixin'
}

general_prefix_op ::= instance_prefix? unqualified_prefix_op
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusGeneralReference"
}

unqualified_prefix_op ::= prefix_op
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusReferenceElement"
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusUnqualifiedPrefixOpImplMixin'
}

general_infix_op ::= instance_prefix? unqualified_infix_op
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusGeneralReference"
}

unqualified_infix_op ::= infix_op_all
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusReferenceElement"
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusUnqualifiedInfixOpImplMixin'
}

general_postfix_op ::= instance_prefix? unqualified_postfix_op
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusGeneralReference"
}

unqualified_postfix_op ::= postfix_op
{
  implements = "com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusReferenceElement"
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusUnqualifiedPostfixOpImplMixin'
}

module_definition ::= nonfix_lhs clear_indent '==' instance

assumption ::= clear_indent ('ASSUME' | 'ASSUMPTION' | 'AXIOM') expr { pin = 2 }

theorem ::= clear_indent 'THEOREM' expr { pin = 2 }

identifier_expr ::= general_identifier

identifier_args_expr ::= general_identifier clear_indent '(' <<comma_list op_suite>> clear_indent ')' { pin = 3 }

prefix_op_expr ::= general_prefix_op expr

infix_op_expr ::= expr general_infix_op expr

field_access_expr ::= expr clear_indent '.' clear_indent 'identifier'

postfix_op_expr ::= expr general_postfix_op

paren_expr ::= clear_indent '(' expr clear_indent ')' { pin = 2 }

lambda_expr ::= clear_indent 'LAMBDA' <<comma_list (clear_indent 'identifier')>> clear_indent ':' expr

temporal_quantifier_expr ::= clear_indent ('\AA' | '\EE') <<comma_list (clear_indent 'identifier')>> clear_indent ':' expr
{
  pin = 2
}

quantifier_expr ::= clear_indent ('\A' | '\E') (<<comma_list quantifier_bound>>
                                              | <<comma_list (clear_indent 'identifier')>>) clear_indent ':' expr
{
  pin = 2
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusQuantifierExprImplMixin'
}

choose_expr ::= clear_indent 'CHOOSE' identifier_or_tuple ((clear_indent '\in' expr)? clear_indent ':' expr)
{
  pin = 2
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusChooseExprImplMixin'
}

set_expr ::= clear_indent '{' <<comma_list expr>>? clear_indent '}'
           | set_comprehension
           | set_comprehension_map

// e.g. { x \in some_set : x /= 1 }
set_comprehension ::= clear_indent '{' identifier_or_tuple clear_indent '\in' expr clear_indent ':' expr clear_indent '}'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusSetComprehensionImplMixin'
}
// e.g. { x + 1 : x \in some_set }
// in this expression, variable binding appears right to the variable-use
set_comprehension_map ::= clear_indent '{' expr clear_indent ':' <<comma_list quantifier_bound>> clear_indent '}'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusSetComprehensionMapImplMixin'
}

apply_argument_expr ::= expr clear_indent '[' <<comma_list expr>> clear_indent ']'

function_literal_expr ::= clear_indent '[' <<comma_list quantifier_bound>> clear_indent '|->' expr clear_indent ']'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusFunctionLiteralExprImplMixin'
}

functions_expr ::= clear_indent '[' expr clear_indent '->' expr clear_indent ']'

records_expr ::= clear_indent '[' <<comma_list (clear_indent 'identifier' clear_indent '|->' expr)>> clear_indent ']'
               | clear_indent '[' <<comma_list (clear_indent 'identifier' clear_indent ':' expr)>> clear_indent ']'

except_expr ::= clear_indent '[' expr clear_indent 'EXCEPT'
  <<comma_list (clear_indent '!' ((clear_indent '.' clear_indent 'identifier')
                                 | clear_indent '[' <<comma_list expr>> clear_indent ']')+ clear_indent '=' expr)
  >> clear_indent ']'

tuple_expr ::= clear_indent '<<' <<comma_list expr>>? clear_indent '>>' { pin = 2 }

cartesian_product_expr ::= expr (clear_indent '\X' expr)+

action_expr ::= clear_indent '[' expr clear_indent ']_' reduced_expr
              | clear_indent '<<' expr clear_indent '>>_' reduced_expr

fairness_expr ::= clear_indent ('WF_' | 'SF_') reduced_expr (clear_indent '(' expr clear_indent ')')?
{
  pin = 2
}

if_expr ::= clear_indent 'IF' expr clear_indent 'THEN' expr clear_indent 'ELSE' expr
{
  pin = 2
}

private case_arm ::= expr clear_indent '->' expr

case_expr ::= clear_indent 'CASE' case_arm (clear_indent '[]' case_arm)*
    (clear_indent '[]' clear_indent 'OTHER' clear_indent '->' expr)?
{
  pin = 2
}

let_expr ::= clear_indent 'LET' (op_definition | func_definition | module_definition)+ clear_indent 'IN' expr
{
  pin = 2
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusNameContext'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusLetExprImplMixin'
}

private junc_begin ::= 'JUNCTION_BEGIN' {
  consumeTokenMethod = "consumeTokenFast"
}

private junc_cont ::= 'JUNCTION_CONT' {
  consumeTokenMethod = "consumeTokenFast"
}

private junc_break ::= 'JUNCTION_BREAK' {
  consumeTokenMethod = "consumeTokenFast"
}

// Junction-arm can be terminated by other tokens than JUNCTION_BREAK like braces, parenthesis
junction_list_expr ::= (junc_begin '/\' expr (junc_cont '/\' expr)* junc_break?)
                     | (junc_begin '\/' expr (junc_cont '\/' expr)* junc_break?)

literal_expr ::= clear_indent ('string' | 'number')

at_expr ::= clear_indent '@'

expr ::= if_expr
       | except_expr
       | tuple_expr
       | case_expr
       | quantifier_expr
       | temporal_quantifier_expr
       | choose_expr
       | let_expr
       | paren_expr
       | set_expr
       | functions_expr
       | function_literal_expr
       | records_expr
       | infix_op_expr
       | cartesian_product_expr
       | prefix_op_expr
       | postfix_op_expr
       | at_expr
       | junction_list_expr
       | action_expr
       | fairness_expr
       | apply_argument_expr
       | field_access_expr
       | identifier_args_expr
       | identifier_expr
       | literal_expr

// TLC error trace parsing.
// refs: https://github.com/tlaplus/tlaplus/blob/v1.7.1/toolbox/org.lamport.tla.toolbox.tool.tlc.ui/src/org/lamport/tla/toolbox/tool/tlc/output/data/TLCVariableValue.java
// for the original implementation
tlc_error_trace ::= multiple_variable_trace | single_variable_trace
single_variable_trace ::= '/\' ? tlc_variable_decl
multiple_variable_trace ::= ('/\' tlc_variable_decl)+
tlc_variable_decl ::= 'identifier' '=' tlc_value

tlc_primitive_value ::= 'tlc_error_trace_primitive' | 'string' | 'identifier'

tlc_record_value ::= '[' tlc_record_pair (',' tlc_record_pair)* ']'
tlc_record_pair ::= 'identifier' '|->' tlc_value

tlc_set_empty_value ::= '{' '}'
tlc_set_value ::= '{' tlc_value (',' tlc_value)* '}'

tlc_sequence_empty_value ::= '<<' '>>'
tlc_sequence_value ::= '<<' tlc_value (',' tlc_value)* '>>'

tlc_function_value ::= '(' tlc_function_pair ('@@' tlc_function_pair)* ')'
tlc_function_pair ::= 'identifier' ':>' tlc_value

tlc_value ::= tlc_function_value
            | tlc_sequence_value
            | tlc_sequence_empty_value
            | tlc_set_value
            | tlc_set_empty_value
            | tlc_record_value
            | tlc_primitive_value

// PlusCal parsing
// C-Syntax: https://lamport.azurewebsites.net/tla/c-manual.pdf
// P-Syntax: https://lamport.azurewebsites.net/tla/p-manual.pdf
plus_cal_algorithm ::= plus_cal_c_syntax | plus_cal_p_syntax

plus_cal_c_syntax ::= 'ALGORITHM_BEGIN' plus_cal_name '{'
                       plus_cal_var_decls?
                       plus_cal_definitions_c?
                       plus_cal_macro_c*
                       plus_cal_procedure_c*
                       (plus_cal_compound_stmt | plus_cal_process_c+) '}'

plus_cal_p_syntax ::= 'ALGORITHM_BEGIN' plus_cal_name
                      plus_cal_p_var_decls?
                      plus_cal_definitions_p?
                      plus_cal_macro_p*
                      plus_cal_procedure_p*
                      (plus_cal_algorithm_body_p | plus_cal_process_p+)
                      'end' 'algorithm'

plus_cal_var_decls ::= clear_indent ('variable' | 'variables') plus_cal_var_decl+
{
  pin = 2
}
plus_cal_var_decl ::= plus_cal_variable (clear_indent ('=' | '\in') expr)? clear_indent (';' | ',')

plus_cal_p_var_decls ::= clear_indent ('variable' | 'variables') (plus_cal_p_var_decl clear_indent (stmt_termination | ','))+
{
  pin = 2
}
plus_cal_p_var_decl ::= plus_cal_variable (clear_indent ('=' | '\in') expr)?

plus_cal_definitions_c ::= clear_indent 'define' clear_indent '{' plus_cal_defs clear_indent '}' clear_indent ';'?
{
  pin = 2
}
plus_cal_definitions_p ::= clear_indent 'define' plus_cal_defs clear_indent 'end' clear_indent 'define' clear_indent ';'?
{
  pin = 2
}

plus_cal_macro_c ::= clear_indent 'macro' plus_cal_name clear_indent '(' <<comma_list plus_cal_variable>>? clear_indent ')'
          plus_cal_compound_stmt clear_indent ';'?
{
  pin = 2
}
plus_cal_macro_p ::= clear_indent 'macro' plus_cal_name clear_indent '(' <<comma_list plus_cal_variable>>? clear_indent ')'
          plus_cal_algorithm_body_p
          clear_indent 'end' clear_indent 'macro' clear_indent ';'?
{
  pin = 2
}

plus_cal_procedure_c ::= clear_indent 'procedure' plus_cal_name clear_indent '(' <<comma_list plus_cal_p_var_decl>>? clear_indent ')'
              plus_cal_p_var_decls?
              plus_cal_compound_stmt clear_indent ';'?
{
  pin = 2
}
plus_cal_procedure_p ::= clear_indent 'procedure' plus_cal_name clear_indent '(' <<comma_list plus_cal_p_var_decl>>? clear_indent ')'
              plus_cal_p_var_decls?
              plus_cal_algorithm_body_p
              clear_indent 'end' clear_indent 'procedure' clear_indent ';'?
{
  pin = 2
}

plus_cal_process_c ::= clear_indent ('fair' '+'?)? clear_indent 'process' clear_indent '(' plus_cal_name ('=' | '\in') expr clear_indent ')'
             plus_cal_var_decls?
             plus_cal_compound_stmt clear_indent ';'?
plus_cal_process_p ::= clear_indent ('fair' '+'?)? clear_indent 'process' plus_cal_name clear_indent ('=' | '\in') expr
             plus_cal_var_decls?
             plus_cal_algorithm_body_p
             clear_indent 'end' clear_indent 'process' clear_indent ';'?

plus_cal_compound_stmt ::= clear_indent '{' plus_cal_stmt_c (clear_indent ';' plus_cal_stmt_c)* clear_indent ';'? clear_indent '}'
plus_cal_algorithm_body_p ::= clear_indent 'begin' plus_cal_stmt_p+
{
  pin = 2
}

plus_cal_stmt_c ::= (plus_cal_label clear_indent ':' clear_indent ('+' | '-')?)? (plus_cal_unlabeled_stmt_c | plus_cal_compound_stmt)
plus_cal_stmt_p ::= (plus_cal_label clear_indent ':' clear_indent ('+' | '-')?)? plus_cal_unlabeled_stmt_p

plus_cal_assign ::= plus_cal_lhs clear_indent ':=' expr (clear_indent '||' plus_cal_lhs clear_indent ':=' expr)*
{
  pin = 3
}
private plus_cal_assign_p ::= plus_cal_assign clear_indent (';' | &stmt_termination)

plus_cal_lhs ::= plus_cal_variable ((clear_indent '[' <<comma_list expr>> clear_indent ']') | clear_indent '.' plus_cal_field)*

plus_cal_if_c ::= clear_indent 'if' clear_indent '(' expr clear_indent ')' plus_cal_stmt_c (clear_indent 'else' plus_cal_stmt_c)?
{
  pin = 2
}
plus_cal_if_p ::= clear_indent 'if' expr clear_indent 'then' plus_cal_stmt_p+
                 (clear_indent 'elsif' expr clear_indent 'then' plus_cal_stmt_p+)*
                 (clear_indent 'else' plus_cal_stmt_p+)? clear_indent 'end' clear_indent 'if' clear_indent stmt_termination
{
  pin = 2
}

plus_cal_while_c ::= clear_indent 'while' clear_indent '(' expr clear_indent ')' plus_cal_stmt_c
{
  pin = 2
}
plus_cal_while_p ::= clear_indent 'while' expr clear_indent 'do' plus_cal_stmt_p+ clear_indent 'end' clear_indent 'while' clear_indent stmt_termination
{
  pin = 2
}

plus_cal_either_c ::= clear_indent 'either' plus_cal_stmt_c (clear_indent 'or' plus_cal_stmt_c)+
{
  pin = 2
}
plus_cal_either_p ::= clear_indent 'either' plus_cal_stmt_p+ (clear_indent 'or' plus_cal_stmt_p+)+ clear_indent 'end' clear_indent 'either' clear_indent stmt_termination
{
  pin = 2
}

plus_cal_unlabeled_stmt_c ::= plus_cal_assign
                            | plus_cal_if_c
                            | plus_cal_while_c
                            | plus_cal_either_c
                            | plus_cal_with_c
                            | plus_cal_await
                            | plus_cal_print
                            | plus_cal_assert
                            | plus_cal_skip
                            | plus_cal_return
                            | plus_cal_goto
                            | plus_cal_call
                            | plus_cal_macro_call

plus_cal_unlabeled_stmt_p ::= plus_cal_assign_p
                            | plus_cal_if_p
                            | plus_cal_while_p
                            | plus_cal_either_p
                            | plus_cal_with_p
                            | plus_cal_await_p
                            | plus_cal_print_p
                            | plus_cal_assert_p
                            | plus_cal_skip_p
                            | plus_cal_return_p
                            | plus_cal_goto_p
                            | plus_cal_call
                            | plus_cal_macro_call_p

plus_cal_skip ::= clear_indent 'skip' { pin = 2 }
private plus_cal_skip_p ::= plus_cal_skip clear_indent stmt_termination

plus_cal_return ::= clear_indent 'return' { pin = 2 }
private plus_cal_return_p ::= plus_cal_return clear_indent stmt_termination

plus_cal_with_c ::= clear_indent 'with' clear_indent '(' plus_cal_variable clear_indent ('=' | '\in') expr
       (clear_indent (stmt_termination | ',') plus_cal_variable clear_indent ('=' | '\in') expr)* clear_indent (';' | ',')? clear_indent ')' plus_cal_stmt_c
{
  pin = 2
}
plus_cal_with_p ::= clear_indent 'with' (plus_cal_variable clear_indent ('=' | '\in') expr clear_indent (stmt_termination | ','))+
                    clear_indent 'do' plus_cal_stmt_p+ clear_indent 'end' clear_indent 'with' clear_indent stmt_termination
{
  pin = 2
}

plus_cal_await ::= clear_indent ('await' | 'when') expr { pin = 2 }
private plus_cal_await_p ::= plus_cal_await clear_indent stmt_termination

plus_cal_print ::= clear_indent 'print' expr { pin = 2 }
private plus_cal_print_p ::= plus_cal_print clear_indent stmt_termination

plus_cal_assert ::= clear_indent 'assert' expr { pin = 2 }
private plus_cal_assert_p ::= plus_cal_assert clear_indent stmt_termination

plus_cal_goto ::= clear_indent 'goto' plus_cal_label { pin = 2 }
private plus_cal_goto_p ::= plus_cal_goto clear_indent stmt_termination

plus_cal_call ::= clear_indent 'call' plus_cal_macro_call { pin = 2 }

plus_cal_macro_call ::= plus_cal_name clear_indent '(' <<comma_list expr>>? clear_indent ')'
private plus_cal_macro_call_p ::= plus_cal_macro_call clear_indent stmt_termination

plus_cal_variable ::= clear_indent 'identifier'

plus_cal_field ::= clear_indent 'identifier'

plus_cal_name ::= clear_indent 'identifier'

plus_cal_label ::= clear_indent 'identifier'

plus_cal_defs ::= plus_cal_def*

private plus_cal_def ::= variable_decl
                       | constant_decl
                       | clear_indent 'LOCAL' op_definition
                       | op_definition
                       | clear_indent 'LOCAL' func_definition
                       | func_definition
                       | clear_indent 'LOCAL' instance
                       | instance
                       | clear_indent 'LOCAL' module_definition
                       | module_definition
                       | assumption
                       | theorem

// https://lamport.azurewebsites.net/tla/p-manual.pdf
// > Any “;” prescribed in the grammar may be omitted if it immediately precedes any of the following reserved words.
// > begin do else elsif end macro or procedure process
//
// But seems there are few more tokens that preceding semicolon can be omitted.
// refs: https://github.com/tlaplus/tlaplus/blob/v1.7.1/tlatools/org.lamport.tlatools/src/pcal/ParseAlgorithm.java#L3450-L3460
private stmt_termination ::= ';' | &('begin' | 'do' | 'else' | 'elsif' | 'end' | 'macro' | 'or' | 'procedure' | 'process' | 'fair' | 'define')
