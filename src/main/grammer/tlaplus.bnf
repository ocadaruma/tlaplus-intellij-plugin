{
    parserClass='com.mayreh.intellij.plugin.tlaplus.parser.TLAplusParser'
    parserUtilClass='com.mayreh.intellij.plugin.tlaplus.parser.TLAplusParserUtil'

//    implements='com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusElement'
//    extends='com.mayreh.intellij.plugin.tlaplus.psi.ext.TLAplusElementImpl'

    elementTypeHolderClass='com.mayreh.intellij.plugin.tlaplus.psi.TLAplusElementTypes'

    elementTypeClass='com.mayreh.intellij.plugin.tlaplus.psi.TLAplusElementType'
    tokenTypeClass='com.mayreh.intellij.plugin.tlaplus.psi.TLAplusTokenType'

    psiClassPrefix='TLAplus'
    psiImplClassSuffix='Impl'
    psiPackage='com.mayreh.intellij.plugin.tlaplus.psi'
    psiImplPackage='com.mayreh.intellij.plugin.tlaplus.psi.impl'
    psiImplUtilClass='com.mayreh.intellij.plugin.tlaplus.psi.impl.TLAplusPsiImplUtil'

//    parserImports=[
//      'static com.mayreh.intellij.plugin.tlaplus.parser.TLAplusParserUtil.*'
//    ]

    tokens = [
        // outside of the module block
        IGNORED            = 'IGNORED'

        COMMENT_LINE       = 'COMMENT_LINE'
        COMMENT_BLOCK      = 'COMMENT_BLOCK'

        MODULE_BEGIN       = 'MODULE_BEGIN'

        KEYWORD_ASSUME     = 'ASSUME'
        KEYWORD_ELSE       = 'ELSE'
        KEYWORD_LOCAL      = 'LOCAL'
        KEYWORD_ASSUMPTION = 'ASSUMPTION'
        KEYWORD_MODULE     = 'MODULE'
        KEYWORD_VARIABLE   = 'VARIABLE'
        KEYWORD_AXIOM      = 'AXIOM'
        KEYWORD_EXCEPT     = 'EXCEPT'
        KEYWORD_OTHER      = 'OTHER'
        KEYWORD_VARIABLES  = 'VARIABLES'
        KEYWORD_CASE       = 'CASE'
        KEYWORD_EXTENDS    = 'EXTENDS'
        KEYWORD_SF_        = 'SF_'
        KEYWORD_WF_        = 'WF_'
        KEYWORD_CHOOSE     = 'CHOOSE'
        KEYWORD_IF         = 'IF'
        KEYWORD_WITH       = 'WITH'
        KEYWORD_CONSTANT   = 'CONSTANT'
        KEYWORD_IN         = 'IN'
        KEYWORD_THEN       = 'THEN'
        KEYWORD_CONSTANTS  = 'CONSTANTS'
        KEYWORD_INSTANCE   = 'INSTANCE'
        KEYWORD_THEOREM    = 'THEOREM'
        KEYWORD_LET        = 'LET'

        LITERAL_NUMBER     = 'number'
        LITERAL_STRING     = 'string'

        IDENTIFIER         = 'identifier'

        LTUPLE             = '<<'
        RTUPLE             = '>>'
        RTUPLEUNDER        = '>>_'
        COMMA              = ','
        SEPARATOR          = '----'
        MODULE_END         = '===='
        LPAREN             = '('
        RPAREN             = ')'
        LBRACKET           = '{'
        RBRACKET           = '}'
        LSQBRACKET         = '['
        RSQBRACKET         = ']'
        RSQBRACKETUNDER    = ']_'
        DOT                = '.'
        COLON              = ':'
        UNDER              = '_'
        BANG               = '!'
        AT                 = '@'

        DEFINE             = '=='

        OP_ENABLED         = 'ENABLED'
        OP_UNCHANGED       = 'UNCHANGED'
        OP_POWERSET        = 'SUBSET'
        OP_DOMAIN          = 'DOMAIN'
        OP_UNION           = 'UNION'
        OP_NEG             = '~'
        OP_SQUARE          = '[]'
        OP_DIAMOND         = '<>'
        OP_DASH            = '-'
        OP_LAND            = '/\'
        OP_IN              = '\in'
        OP_LT              = '<'
        OP_LTEQ            = '=<'
        OP_LTLT            = '\ll'
        OP_PREC            = '\prec'
        OP_PRECEQ          = '\preceq'
        OP_SUBSETEQ        = '\subseteq'
        OP_SUBSET          = '\subset'
        OP_SQSUBSET        = '\sqsubset'
        OP_SQSUBSETEQ      = '\sqsubseteq'
        OP_VBARDASH        = '|-'
        OP_VBAREQ          = '|='
        OP_DASHGT          = '->'
        OP_CAP             = '\cap'
        OP_SQCAP           = '\sqcap'
        OP_OPLUS           = '(+)'
        OP_OMINUS          = '(-)'
        OP_ODOT            = '(.)'
        OP_OTIMES          = '(\X)'
        OP_OSLASH          = '(/)'
        OP_LOR             = '\/'
        OP_EQUIV           = '<=>'
        OP_NOTIN           = '\notin'
        OP_GT              = '>'
        OP_GTEQ            = '>='
        OP_GTGT            = '\gg'
        OP_SUCC            = '\succ'
        OP_SUCCEQ          = '\succeq'
        OP_SUPSETEQ        = '\supseteq'
        OP_SUPSET          = '\supset'
        OP_SQSUPSET        = '\sqsupset'
        OP_SQSUPSETEQ      = '\sqsupseteq'
        OP_DASHVBAR        = '-|'
        OP_EQVBAR          = '=|'
        OP_LTDASH          = '<-'
        OP_CUP             = '\cup'
        OP_SQCUP           = '\sqcup'
        OP_UPLUS           = '\uplus'
        OP_X               = '\X'
        OP_WR              = '\wr'
        OP_PROPTO          = '\propto'
        OP_EQGT            = '=>'
        OP_EQ              = '='
        OP_NOTEQ           = '/='
        OP_TILDEGT         = '~>'
        OP_DASHPLUSDASHGT  = '-+->'
        OP_VBARDASHGT      = '|->'
        OP_DIV             = '\div'
        OP_CDOT            = '\cdot'
        OP_CIRC            = '\circ'
        OP_BULLET          = '\bullet'
        OP_STAR            = '\star'
        OP_BIGCIRC         = '\bigcirc'
        OP_SIM             = '\sim'
        OP_SIMEQ           = '\simeq'
        OP_ASYMP           = '\asymp'
        OP_APPROX          = '\approx'
        OP_CONG            = '\cong'
        OP_DOTEQ           = '\doteq'
        OP_BANGBANG        = '!!'
        OP_SHARPSHARP      = '##'
        OP_DOLLAR          = '$'
        OP_DOLLARDOLLAR    = '$$'
        OP_PERCENT         = '%'
        OP_PERCENTPERCENT  = '%%'
        OP_AMP             = '&'
        OP_AMPAMP          = '&&'
        OP_ASTER           = '*'
        OP_ASTERASTER      = '**'
        OP_PLUS            = '+'
        OP_PLUSPLUS        = '++'
        OP_DASHDASH        = '--'
        OP_DOTDOT          = '..'
        OP_DOTDOTDOT       = '...'
        OP_SLASH           = '/'
        OP_SLASHSLASH      = '//'
        OP_COLONCOLONEQ    = '::='
        OP_COLONEQ         = ':='
        OP_COLONGT         = ':>'
        OP_LTCOLON         = '<:'
        OP_QUERY           = '?'
        OP_QUERYQUERY      = '??'
        OP_SUBTRACT        = '\'
        OP_CARET           = '^'
        OP_CARETCARET      = '^^'
        OP_VBAR            = '|'
        OP_VBARVBAR        = '||'
        OP_ATAT            = '@@'
        OP_PRIME           = "'"
        OP_CARETPLUS       = '^+'
        OP_CARETASTER      = '^*'
        OP_CARETSHARP      = '^#'
        OP_DASHDOT         = '-.' // only used when define '-' prefix operator

        QUANTIFIER_E       = '\E'
        QUANTIFIER_EE      = '\EE'
        QUANTIFIER_A       = '\A'
        QUANTIFIER_AA      = '\AA'

        // only for live preview
//        WHITE_SPACE = 'regexp:(\s|\R)+'
    ]

    extends('.*_expr') = expr
//    generateTokenAccessors=true
}

module ::= module_header ('EXTENDS' <<comma_list 'identifier'>>)? unit* '===='
{
  pin = 1
}

private meta comma_list ::= <<param>>(',' <<param>>)*

module_header ::= 'MODULE_BEGIN' 'identifier' '----'
{
  implements = 'com.mayreh.intellij.plugin.tlaplus.psi.TLAplusNamedElement'
  mixin = 'com.mayreh.intellij.plugin.tlaplus.psi.impl.TLAplusNamedElementImpl'
}

private unit ::= variable_decl
               | constant_decl
               | 'LOCAL' op_definition
               | op_definition
               | 'LOCAL' func_definition
               | func_definition
               | 'LOCAL' instance
               | instance
               | 'LOCAL' module_definition
               | module_definition
               | assumption
               | theorem
               | module
               | '----'

private identifier_or_tuple ::= 'identifier'
                              | '<<' <<comma_list 'identifier'>> '>>'

prefix_op ::= '-'
            | '~'
            | '[]'
            | '<>'
            | 'DOMAIN'
            | 'ENABLED'
            | 'SUBSET'
            | 'UNCHANGED'
            | 'UNION'

infix_op ::= '!'
           | '/='
           | '##'
           | '$'
           | '$$'
           | '%'
           | '%%'
           | '&'
           | '&&'
           | '(+)'
           | '(-)'
           | '(.)'
           | '(/)'
           | '(\X)'
           | '*'
           | '**'
           | '+'
           | '++'
           | '-'
           | '-+->'
           | '--'
           | '-|'
           | '..'
           | '...'
           | '/'
           | '//'
           | '/\'
           | '::='
           | ':='
           | ':>'
           | '<'
           | '<:'
           | '<=>'
           | '\notin'
           | '='
           | '=<'
           | '=>'
           | '=|'
           | '>'
           | '>='
           | '?'
           | '??'
           | '@@'
           | '\'
           | '\/'
           | '^'
           | '^^'
           | '|'
           | '|-'
           | '|='
           | '||'
           | '~>'
           | op_period
           | '\approx'
           | '\sqsupseteq'
           | '\asymp'
           | '\gg'
           | '\star'
           | '\bigcirc'
           | '\in'
           | '\prec'
           | '\subset'
           | '\bullet'
           | '\cap'
           | '\preceq'
           | '\subseteq'
           | '\propto'
           | '\succ'
           | '\cdot'
           | '\sim'
           | '\succeq'
           | '\circ'
           | '\ll'
           | '\simeq'
           | '\supset'
           | '\cong'
           | '\sqcap'
           | '\supseteq'
           | '\cup'
           | '\sqcup'
           | '\div'
           | '\sqsubset'
           | OP_UPLUS  // we can't use token value here since it causes illegal unicode escape in generated source
           | '\doteq'
           | '\sqsubseteq'
           | '\wr'
           | '\sqsupset'

postfix_op ::= '^+'
             | '^*'
             | '^#'
             | "'"

op_period ::= '.'

op_decl ::= 'identifier'
          | 'identifier' '(' <<comma_list '_'>> ')'
          | prefix_op '_'
          | '_' infix_op '_'
          | '_' postfix_op

variable_decl ::= ('VARIABLE' | 'VARIABLES') <<comma_list 'identifier'>>

constant_decl ::= ('CONSTANT' | 'CONSTANTS') <<comma_list op_decl>>

private nonfix_lhs ::= 'identifier' ('(' <<comma_list ('identifier' | op_decl)>> ')')?

op_definition ::= (nonfix_lhs |
                   prefix_op 'identifier' |
                   'identifier' infix_op 'identifier' |
                   'identifier' postfix_op) '==' expr

func_definition ::= 'identifier' '[' <<comma_list quantifier_bound>> ']' '==' expr

private quantifier_bound ::= ('<<' <<comma_list 'identifier'>> '>>' | <<comma_list 'identifier'>>) '\in' expr

instance ::= 'INSTANCE' 'identifier' ('WITH' <<comma_list substitution>>)? { pin = 1 }

private substitution ::= ('identifier' | prefix_op | infix_op | postfix_op) '<-' argument

private argument ::= expr
                   | general_prefix_op
                   | general_infix_op
                   | general_postfix_op

private instance_prefix ::= ('identifier' ('(' <<comma_list expr>> ')')? '!')*

private general_identifier ::= instance_prefix 'identifier'

private general_prefix_op ::= instance_prefix prefix_op

private general_infix_op ::= instance_prefix infix_op

private general_postfix_op ::= instance_prefix postfix_op

module_definition ::= nonfix_lhs '==' instance

assumption ::= ('ASSUME' | 'ASSUMPTION' | 'AXIOM') expr { pin = 1 }

theorem ::= 'THEOREM' expr { pin = 1 }

identifier_expr ::= general_identifier ('(' <<comma_list argument>> ')')?

prefix_op_expr ::= general_prefix_op expr

infix_op_expr ::= expr general_infix_op expr

postfix_op_expr ::= expr general_postfix_op

paren_expr ::= '(' expr ')' { pin = 1 }

temporal_quantifier_expr ::= ('\AA' | '\EE') <<comma_list 'identifier'>> ':' expr { pin = 1 }

quantifier_expr ::= ('\A' | '\E') (<<comma_list quantifier_bound>> | <<comma_list 'identifier'>>) ':' expr
{
  pin = 1
}

choose_expr ::= 'CHOOSE' identifier_or_tuple (('\in' expr)? ':' expr) { pin = 1 }

set_expr ::= '{' <<comma_list expr>>? '}'
           | '{' identifier_or_tuple '\in' expr ':' expr '}'
           | '{' expr ':' <<comma_list quantifier_bound>> '}'

apply_argument_expr ::= expr '[' <<comma_list expr>> ']'

functions_expr ::= '[' <<comma_list quantifier_bound>> '|->' expr ']'
                 | '[' expr '->' expr ']'

records_expr ::= '[' <<comma_list ('identifier' '|->' expr)>> ']'
               | '[' <<comma_list ('identifier' ':' expr)>> ']'

except_expr ::= '[' expr 'EXCEPT' <<comma_list ('!' (('.' 'identifier') | '[' <<comma_list expr>> ']')+ '=' expr)>> ']'

tuple_expr ::= '<<' <<comma_list expr>> '>>' { pin = 1 }

cartesian_product_expr ::= expr ('\X' expr)+

action_expr ::= '[' expr ']_' expr
              | '<<' expr '>>_' expr

fairness_expr ::= ('WF_' | 'SF_') expr '(' expr ')' { pin = 1 }

if_expr ::= 'IF' expr 'THEN' expr 'ELSE' expr { pin = 1 }

private case_arm ::= expr '->' expr

case_expr ::= 'CASE' case_arm ('[]' case_arm)* ('[]' 'OTHER' '->' expr)? { pin = 1 }

let_expr ::= 'LET' (op_definition | func_definition | module_definition)+ 'IN' expr { pin = 1 }

junction_list_expr ::= ('/\' expr)+
                     | ('\/' expr)+

literal_expr ::= ('string' | 'number')

at_expr ::= '@'

expr ::= action_expr
       | fairness_expr
       | if_expr
       | prefix_op_expr
       | postfix_op_expr
       | infix_op_expr
       | junction_list_expr
       | cartesian_product_expr
       | paren_expr
       | set_expr
       | apply_argument_expr
       | functions_expr
       | records_expr
       | except_expr
       | tuple_expr
       | case_expr
       | quantifier_expr
       | temporal_quantifier_expr
       | choose_expr
       | let_expr
       | identifier_expr
       | literal_expr
       | at_expr
