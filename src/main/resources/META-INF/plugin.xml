<idea-plugin>
    <id>com.mayreh.tlaplus-intellij-plugin</id>
    <name>TLA+</name>
    <vendor url="https://github.com/ocadaruma">Haruki Okada</vendor>

    <description><![CDATA[
    Unofficial language plugin for TLA+ formal specification language.<br>
    <em>Features:</em>
    <ul>
    <li>Syntax highlighting</li>
    <li>Go to definition (Find usages)</li>
    <li>Code completion</li>
    <li>Run TLC</li>
    </ul>
    ]]></description>

    <change-notes><![CDATA[
    Please visit <a href="https://github.com/ocadaruma/tlaplus-intellij-plugin/releases">GitHub Releases</a>
    ]]>
    </change-notes>

    <idea-version since-build="211.7628.21" until-build="213.*"/>

    <depends>com.intellij.modules.platform</depends>
    <depends>org.intellij.intelliLang</depends>
    <depends>com.intellij.java</depends>

    <extensions defaultExtensionNs="com.intellij">
        <fileType
          name="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusFileType"
          fieldName="INSTANCE"
          language="TLA+"
          extensions="tla"/>
        <lang.parserDefinition
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusParserDefinition"/>
        <lang.syntaxHighlighterFactory
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusSyntaxHighlighterFactory"/>
        <lang.commenter
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusCommenter"/>
        <configurationType
          implementation="com.mayreh.intellij.plugin.tlaplus.run.TLCRunConfigurationType"/>
        <runConfigurationProducer
          implementation="com.mayreh.intellij.plugin.tlaplus.run.TLCRunConfigurationProducer"/>
        <runLineMarkerContributor
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.run.TLCRunLineMarkerContributor"/>
        <lang.findUsagesProvider
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusFindUsagesProvider"/>
        <lang.refactoringSupport
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusRefactoringSupportProvider"/>
        <completion.contributor
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.tlaplus.TLAplusCompletionContributor"/>

        <notificationGroup id="TLA+ plugin" displayType="BALLOON"/>

        <!-- TLC config -->
        <!-- we specify order explicitly because some fileTypes (e.g. TextMate) may detect -->
        <!-- tlc config as its file type falsely because of iteration-order in FileTypeManagerImpl. -->
        <fileType
          name="TLC config"
          implementationClass="com.mayreh.intellij.plugin.tlc.TLCConfigFileType"
          fieldName="INSTANCE"
          language="TLC config"
          order="first"/>
        <lang.parserDefinition
          language="TLC config"
          implementationClass="com.mayreh.intellij.plugin.tlc.TLCConfigParserDefinition"/>
        <lang.syntaxHighlighterFactory
          language="TLC config"
          implementationClass="com.mayreh.intellij.plugin.tlc.TLCConfigSyntaxHighlighterFactory"/>
        <lang.commenter
          language="TLC config"
          implementationClass="com.mayreh.intellij.plugin.tlc.TLCConfigCommenter"/>
        <stepsBeforeRunProvider implementation="com.mayreh.intellij.plugin.tlaplus.run.TLCBeforeRunTaskProvider"/>

        <!-- PlusCal -->
        <lang.parserDefinition
          language="PlusCal"
          implementationClass="com.mayreh.intellij.plugin.pluscal.PlusCalParserDefinition"/>
        <fileType
          name="PlusCal"
          implementationClass="com.mayreh.intellij.plugin.pluscal.PlusCalFileType"
          fieldName="INSTANCE"
          language="PlusCal"/>
        <lang.syntaxHighlighterFactory
          language="PlusCal"
          implementationClass="com.mayreh.intellij.plugin.pluscal.PlusCalSyntaxHighlighterFactory"/>
        <!-- We register PlusCalCompletionContributor as TLA+ language's completion contributor -->
        <!-- as all element types of PlusCal languages are associated to TLA+ language (see TLAplusElementType) -->
        <!-- because we use same BNF for them, and it's natural as TLA+ definitions, expressions can be embedded -->
        <!-- in PlusCal algorithm. -->
        <completion.contributor
          language="TLA+"
          implementationClass="com.mayreh.intellij.plugin.pluscal.PlusCalCompletionContributor"/>
        <multiHostInjector implementation="com.mayreh.intellij.plugin.pluscal.PlusCalLanguageInjector"/>
    </extensions>

    <actions>
        <action id="com.mayreh.TranslatePlusCal"
                class="com.mayreh.intellij.plugin.tlaplus.ide.actions.PlusCalTranslateAction"
                text="Translate PlusCal"
                description="Translate PlusCal algorithm into TLA+">
            <add-to-group group-id="CodeMenu" anchor="last"/>
        </action>
    </actions>
</idea-plugin>
