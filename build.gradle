import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.grammarkit.tasks.*

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.13.3"
        classpath "org.jetbrains.intellij.plugins:gradle-grammarkit-plugin:2022.3.2.2"
    }
}

apply plugin: "java"
apply plugin: "org.jetbrains.grammarkit"
apply plugin: "org.jetbrains.intellij"

group = "com.mayreh.intellij.plugins"
version = "${version}" + (snapshot.toBoolean() ? "-SNAPSHOT" : "")

repositories {
    mavenCentral()
}

ext {
    lombokVersion = '1.18.24'
}

dependencies {
    implementation files('libs/tla2tools.jar')
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.assertj:assertj-core:3.21.0"
}

intellij {
    version = findProperty("sinceBuild")
    plugins = ["org.intellij.intelliLang"]
    updateSinceUntilBuild = false
}

patchPluginXml {
    version = project.version
    sinceBuild = findProperty("sinceBuild")
    untilBuild = findProperty("untilBuild")
}

sourceSets {
    main {
        java.srcDirs("src/gen")
    }
}

task prepareLib(type: Exec) {
    workingDir project.rootDir
    commandLine './setup.sh'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

task generateTLAplusLexer(type: GenerateLexerTask) {
    sourceFile.set(file("src/main/grammar/tlaplus.flex"))
    targetOutputDir.set(layout.projectDirectory.dir("src/gen/com/mayreh/intellij/plugin/tlaplus/lexer"))
    purgeOldFiles.set(true)
}

task generateTLAplusModuleBeginLexer(type: GenerateLexerTask) {
    sourceFile.set(file("src/main/grammar/tlaplus_modulebegin.flex"))
    targetOutputDir.set(layout.projectDirectory.dir("src/gen/com/mayreh/intellij/plugin/tlaplus/lexer"))
}

task generateTLAplusPlusCalCommentLexer(type: GenerateLexerTask) {
    sourceFile.set(file("src/main/grammar/tlaplus_plus_cal_comment.flex"))
    targetOutputDir.set(layout.projectDirectory.dir("src/gen/com/mayreh/intellij/plugin/tlaplus/lexer"))
}

task generateTLCErrorTraceLexer(type: GenerateLexerTask) {
    sourceFile.set(file("src/main/grammar/tlc_error_trace.flex"))
    targetOutputDir.set(layout.projectDirectory.dir("src/gen/com/mayreh/intellij/plugin/tlaplus/tlc/lexer"))
    purgeOldFiles.set(true)
}

task generateTLAplusParser(type: GenerateParserTask) {
    sourceFile.set(file("src/main/grammar/tlaplus.bnf"))
    targetRootOutputDir.set(layout.projectDirectory.dir("src/gen"))
    pathToParser.set("/com/mayreh/intellij/plugin/tlaplus/parser/TLAplusParser.java")
    pathToPsiRoot.set("/com/mayreh/intellij/plugin/tlaplus/psi")
    purgeOldFiles.set(true)
}

task generateTLCConfigParser(type: GenerateParserTask) {
    sourceFile.set(file("src/main/grammar/tlc_config.bnf"))
    targetRootOutputDir.set(layout.projectDirectory.dir("src/gen"))
    pathToParser.set("/com/mayreh/intellij/plugin/tlc/parser/TLCConfigParser.java")
    pathToPsiRoot.set("/com/mayreh/intellij/plugin/tlc/psi")
}

task generateTLCConfigLexer(type: GenerateLexerTask) {
    sourceFile.set(file("src/main/grammar/tlc_config.flex"))
    targetOutputDir.set(layout.projectDirectory.dir("src/gen/com/mayreh/intellij/plugin/tlc/lexer"))
}

task generatePlusCalAlgorithmBeginLexer(type: GenerateLexerTask) {
    sourceFile.set(file("src/main/grammar/plus_cal_algorithmbegin.flex"))
    targetOutputDir.set(layout.projectDirectory.dir("src/gen/com/mayreh/intellij/plugin/pluscal/lexer"))
    purgeOldFiles.set(true)
}

compileJava.dependsOn(
        prepareLib,
        generateTLAplusLexer,
        generateTLAplusModuleBeginLexer,
        generateTLAplusPlusCalCommentLexer,
        generateTLCErrorTraceLexer,
        generateTLAplusParser,
        generateTLCConfigParser,
        generateTLCConfigLexer,
        generatePlusCalAlgorithmBeginLexer)

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams false
    }
}

publishPlugin {
    token = findProperty("intellijPublishToken")
}
